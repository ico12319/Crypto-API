// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// AccountRepository is an autogenerated mock type for the AccountRepository type
type AccountRepository struct {
	mock.Mock
}

type AccountRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *AccountRepository) EXPECT() *AccountRepository_Expecter {
	return &AccountRepository_Expecter{mock: &_m.Mock}
}

// GetBalance provides a mock function with no fields
func (_m *AccountRepository) GetBalance() (float64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBalance")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func() (float64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountRepository_GetBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBalance'
type AccountRepository_GetBalance_Call struct {
	*mock.Call
}

// GetBalance is a helper method to define mock.On call
func (_e *AccountRepository_Expecter) GetBalance() *AccountRepository_GetBalance_Call {
	return &AccountRepository_GetBalance_Call{Call: _e.mock.On("GetBalance")}
}

func (_c *AccountRepository_GetBalance_Call) Run(run func()) *AccountRepository_GetBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AccountRepository_GetBalance_Call) Return(_a0 float64, _a1 error) *AccountRepository_GetBalance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AccountRepository_GetBalance_Call) RunAndReturn(run func() (float64, error)) *AccountRepository_GetBalance_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBalance provides a mock function with given fields: amount
func (_m *AccountRepository) UpdateBalance(amount float64) error {
	ret := _m.Called(amount)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBalance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(float64) error); ok {
		r0 = rf(amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AccountRepository_UpdateBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBalance'
type AccountRepository_UpdateBalance_Call struct {
	*mock.Call
}

// UpdateBalance is a helper method to define mock.On call
//   - amount float64
func (_e *AccountRepository_Expecter) UpdateBalance(amount interface{}) *AccountRepository_UpdateBalance_Call {
	return &AccountRepository_UpdateBalance_Call{Call: _e.mock.On("UpdateBalance", amount)}
}

func (_c *AccountRepository_UpdateBalance_Call) Run(run func(amount float64)) *AccountRepository_UpdateBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(float64))
	})
	return _c
}

func (_c *AccountRepository_UpdateBalance_Call) Return(_a0 error) *AccountRepository_UpdateBalance_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AccountRepository_UpdateBalance_Call) RunAndReturn(run func(float64) error) *AccountRepository_UpdateBalance_Call {
	_c.Call.Return(run)
	return _c
}

// NewAccountRepository creates a new instance of AccountRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccountRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccountRepository {
	mock := &AccountRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
